TOPIC: Object-Oriented Programming

SKILLS: Trees & Prefix Tree Optimization, and Lazy Evaluation & Short-Circuiting,

Solution:
Here is a concise Java illustration of an OOP approach to creating a basic Prefix Tree (also known as a Trie), used for optimizing lookups in a set of strings.

```java
public class TrieNode { 
    private TrieNode[] links;
    private boolean isEnd;
 
    public TrieNode() {
        links = new TrieNode[26]; 
    }
    
    public boolean containsKey(char ch) {
        return links[ch -'a'] != null; 
    }
    
    public TrieNode get(char ch) {
        return links[ch -'a']; 
    }
    
    public void put(char ch, TrieNode node) {
        links[ch -'a'] = node; 
    }

    public void setEnd() {
        isEnd = true; 
    }

    public boolean isEnd() {
        return isEnd; 
    }
}

public class Trie {
    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    public void insert(String word) {
        TrieNode node = root;
        for (int i = 0; i < word.length(); i++) {
            char currentChar = word.charAt(i);
            if (!node.containsKey(currentChar)) {
                node.put(currentChar, new TrieNode());
            }
            node = node.get(currentChar);
        }
        node.setEnd();
    }

    public boolean search(String word) {
        TrieNode node = searchPrefix(word);
        return node != null && node.isEnd();
    }

    private TrieNode searchPrefix(String word) {
        TrieNode node = root;
        for (int i = 0; i < word.length(); i++) {
           char curLetter = word.charAt(i);
           if (node.containsKey(curLetter)) {
               node = node.get(curLetter);
           } else {
               return null; 
           }
        }
        return node;
    }
}
```
Explanation:

Above code is a simplified implementation, and it consists of two main classes: `Trie` and `TrieNode`. Here, we use `Trie` class as a prefix tree data structure and `TrieNode` to represent each node (or leaf) in the tree. This approach optimizes the lookups by storing each subsequent character of the string in a deeper level of the tree. This is a common use of trees in programming.

The classes demonstrate Object-Oriented Programming with encapsulation (keeping variables and methods private when possible), class and instance methods, and a constructor method.

We use lazy evaluation as much as possible, for example, in the insert and search methods. The insert method does not create new TrieNode until it's necessarily required to store the character, similarly, the search method stops and returns as soon as it finds that the character is not present.

This lazy evaluation approach also illustrates the concept of short circuiting, where the execution stops as soon as the outcome is determined. The `containsKey` and `get` methods perform simple lookups that return as soon as they know their outcome, resulting in faster code execution.
